<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleAccess.Core</name>
    </assembly>
    <members>
        <member name="T:SimpleAccess.DbColumnAttribute">
            <summary>
            Use for mappint the property with database table column.
            </summary>
        </member>
        <member name="P:SimpleAccess.DbColumnAttribute.DbColumn">
            <summary>
            Database table column name.
            </summary>
        </member>
        <member name="M:SimpleAccess.DbColumnAttribute.#ctor(System.String)">
            <summary>
            Initialize the attribute.
            </summary>
            <param name="dbColumn">Database table column name of the marked property.</param>
        </member>
        <member name="T:SimpleAccess.DefaultValueAttribute">
            <summary>
            Used to set the default value on Entity Property
            </summary>
        </member>
        <member name="P:SimpleAccess.DefaultValueAttribute.DefaultValue">
            <summary>
            Default value on the marked property
            </summary>
        </member>
        <member name="M:SimpleAccess.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Initialize the DefaultValueAttribute
            </summary>
            <param name="value"> All type of value except DataTime </param>
        </member>
        <member name="M:SimpleAccess.DefaultValueAttribute.#ctor(System.DateTime)">
            <summary>
            Initialize the DefaultValueAttribute
            </summary>
            <param name="value"> The DataTime value </param>
        </member>
        <member name="T:SimpleAccess.StoredProcedureNameKeyWordAttribute">
            <summary>
            Specifies the stored procedure name of the Entity.
            </summary>
        </member>
        <member name="P:SimpleAccess.StoredProcedureNameKeyWordAttribute.NameKeyWord">
            <summary>
            Stored procedure name key word of the Entity.
            </summary>
        </member>
        <member name="M:SimpleAccess.StoredProcedureNameKeyWordAttribute.#ctor(System.String)">
            <summary>
            Specifies the stored procedure name key word of the Entity.
            </summary>
            <param name="nameKeyWord"> Stored procedures name keyword. </param>
        </member>
        <member name="T:SimpleAccess.IdentityAttribute">
            <summary>
            Mark a Entity property as Identity columns
            </summary>
        </member>
        <member name="T:SimpleAccess.NotASpParameterAttribute">
            <summary>
            Specifies that the property is not an SqlParameter.
            </summary>
        </member>
        <member name="T:SimpleAccess.ParameterDirectionAttribute">
            <summary>
            Specifies that the ParameterDirection for a SqlParameter Property.
            </summary>
        </member>
        <member name="P:SimpleAccess.ParameterDirectionAttribute.SpParameterDirection">
            <summary>
            Direction of the Marked property in DbParameter
            </summary>
        </member>
        <member name="M:SimpleAccess.ParameterDirectionAttribute.#ctor(System.Data.ParameterDirection)">
            <summary>
            Specifies that the ParameterDirection for a SqlParameter Property.
            </summary>
            <param name="spParameterDirection"> Direction for the SqlParameter.</param>
        </member>
        <member name="T:SimpleAccess.EntityAttribute">
            <summary>
            Specifies the database table/view name of the Entity.
            </summary>
        </member>
        <member name="P:SimpleAccess.EntityAttribute.EntityName">
            <summary>
            Database table/view name.
            </summary>
        </member>
        <member name="P:SimpleAccess.EntityAttribute.DefaultView">
            <summary>
            Database default view name for select.
            </summary>
        </member>
        <member name="M:SimpleAccess.EntityAttribute.#ctor(System.String)">
            <summary>
            Specifies the database table/view name of the Entity.
            </summary>
            <param name="entityName"> Table/View name.</param>
        </member>
        <member name="M:SimpleAccess.EntityAttribute.#ctor(System.String,System.String)">
            <summary>
            Specifies the database table/view name of the Entity.
            </summary>
            <param name="entityName"> Table/View name.</param>
            <param neme="defaultView"> Type of the entity in the database. </param>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.CreateDataParameter(System.Reflection.PropertyInfo,SimpleAccess.Core.ParametersType,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IList{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
            <param name="parametesType"></param>
            <param name="propertyInfos"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.GetSelectAllStatement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.GetInsertStatement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.GetUpdateSatetment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.GetDeleteStatment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.GetInsertParameters(System.Object)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.GetUpdateParameters(System.Object)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISqlBuilder`1.CreateSqlParametersFromProperties(SimpleAccess.Core.ParametersType)">
            <summary>
            Create parameters from object properties
            </summary>
            <param name="parametersType"></param>
            <returns></returns>
        </member>
        <member name="P:SimpleAccess.Core.ISqlBuilder`1.OutParameterPropertyInfoCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:SimpleAccess.Core.ParametersType">
            <summary>
            Defines the DbParameters type to be generated
            </summary>
        </member>
        <member name="F:SimpleAccess.Core.ParametersType.Insert">
            <summary>
            Uses for Insert parameters type, Specially for out parameters
            </summary>
        </member>
        <member name="F:SimpleAccess.Core.ParametersType.Update">
            <summary>
            Uses for Update parameters type. Just normal parameters
            </summary>
        </member>
        <member name="T:SimpleAccess.Core.ConnectionExtension">
            --------------------------------------------------------------------------------------------------
                <summary> Connection extension. </summary>
                *
        </member>
        <member name="M:SimpleAccess.Core.ConnectionExtension.OpenSafely(System.Data.Common.DbConnection)">
            --------------------------------------------------------------------------------------------------
                    <summary> A SqlConnection extension method that opens a safely. </summary>
            		
                    <param name="con"> The con to act on. </param>
            		
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Core.ConnectionExtension.CloseSafely(System.Data.Common.DbConnection)">
            --------------------------------------------------------------------------------------------------
                    <summary> A SqlConnection extension method that closes a safely. </summary>
            		
                    <param name="con"> The con to act on. </param>
            		
                    <returns> . </returns>
                    *
        </member>
        <member name="T:SimpleAccess.Core.DatabaseExtensions">
            <summary>
            Class only exsist for idea
            </summary>
        </member>
        <member name="T:SimpleAccess.Core.DatabaseExtensions.IStoredProcedure`1">
            <summary>
            Only Exist for idea
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:SimpleAccess.Core.DataReaderToObjectExtensions">
            <summary>
            Extension to load objects from DataReaders
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.DataReaderToObjectExtensions.DataReaderToObjectList``1(System.Data.IDataReader,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates a list of a given type from all the rows in a DataReader.
            
            Note this method uses Reflection so this isn't a high performance
            operation, but it can be useful for generic data reader to entity
            conversions on the fly and with anonymous types.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="reader">An open DataReader that's in position to read</param>
            <param name="fieldsToSkip">Optional - comma delimited list of fields that you don't want to update</param>
            <param name="piList">
            Optional - Cached PropertyInfo dictionary that holds property info data for this object.
            Can be used for caching hte PropertyInfo structure for multiple operations to speed up
            translation. If not passed automatically created.
            </param>
            <param name="piListBasedOnDbColumn"> List of <see cref="T:System.Reflection.PropertyInfo"/> object having <see cref="T:SimpleAccess.DbColumnAttribute"/> in it's custom attributes</param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.DataReaderToObjectExtensions.DataReaderToObject``1(System.Data.IDataReader,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Created the object of TType and populates the properties of that object from a single DataReader row using
            Reflection by matching the DataReader fields to a public property 
            of the object. Unmatched properties are left unchanged.
            
            You need to pass in a data reader located on the active row you want
            to serialize.
            
            </summary>
            <param name="reader">Instance of the DataReader to read data from. Should be located on the correct record (Read() should have been called on it before calling this method)</param>
            <param name="fieldsToSkip">Optional - A comma delimited list of object properties that should not be updated</param>
            <param name="piList">Optional - Cached PropertyInfo dictionary that holds property info data for this object</param>
            <param name="piListBasedOnDbColumn"> List of <see cref="T:System.Reflection.PropertyInfo"/> object having <see cref="T:SimpleAccess.DbColumnAttribute"/> in it's custom attributes</param>
        </member>
        <member name="M:SimpleAccess.Core.DataReaderToObjectExtensions.DataReaderToObject``1(System.Data.IDataReader,``0,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Populates the properties of an object from a single DataReader row using
            Reflection by matching the DataReader fields to a public property on
            the object passed in. Unmatched properties are left unchanged.
            
            You need to pass in a data reader located on the active row you want
            to serialize.
            
            This routine works best for matching pure data entities and should
            be used only in low volume environments where retrieval speed is not
            critical due to its use of Reflection.
            </summary>
            <param name="reader">Instance of the DataReader to read data from. Should be located on the correct record (Read() should have been called on it before calling this method)</param>
            <param name="instance">Instance of the object to populate properties on</param>
            <param name="fieldsToSkip">Optional - A comma delimited list of object properties that should not be updated</param>
            <param name="piList">Optional - Cached PropertyInfo dictionary that holds property info data for this object</param>
            <param name="piListBasedOnDbColumn"> List of <see cref="T:System.Reflection.PropertyInfo"/> object having <see cref="T:SimpleAccess.DbColumnAttribute"/> in it's custom attributes</param>
        </member>
        <member name="T:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery">
            <summary>
            Dynamic query class.
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.GetInsertQuery(System.String,System.Object)">
            <summary>
            Gets the insert query.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="item">The item.</param>
            <returns>
            The Sql query based on the item properties.
            </returns>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.GetUpdateQuery(System.String,System.Object)">
            <summary>
            Gets the update query.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="item">The item.</param>
            <returns>
            The Sql query based on the item properties.
            </returns>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.GetDynamicQuery``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets the dynamic query.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="expression">The expression.</param>
            <returns>A result object with the generated sql and dynamic params.</returns>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.GetStoredProcedureWhere``3(System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},SimpleAccess.Core.Entity.EntityInfo{``0,``1})">
            <summary>
            Gets the dynamic query.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="expression">The expression.</param>
            <returns>A result object with the generated sql and dynamic params.</returns>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.WalkTree(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.ExpressionType,System.Collections.Generic.List{SimpleAccess.Core.Entity.RepoWrapper.QueryParameter}@)">
            <summary>
            Walks the tree.
            </summary>
            <param name="body">The body.</param>
            <param name="linkingType">Type of the linking.</param>
            <param name="queryProperties">The query properties.</param>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.WalkTree(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.ExpressionType,System.Collections.Generic.List{SimpleAccess.Core.Entity.RepoWrapper.QueryParameter}@)">
            <summary>
            Walks the tree.
            </summary>
            <param name="body">The body.</param>
            <param name="linkingType">Type of the linking.</param>
            <param name="queryProperties">The query properties.</param>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.GetPropertyName(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets the name of the property.
            </summary>
            <param name="body">The body.</param>
            <returns>The property name for the property expression.</returns>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.GetPropertyName(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets the name of the property.
            </summary>
            <param name="body">The body.</param>
            <returns>The property name for the property expression.</returns>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.DynamicQuery.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the operator.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The expression types SQL server equivalent operator.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:SimpleAccess.Core.Entity.RepoWrapper.QueryParameter">
            <summary>
            Class that models the data structure in coverting the expression tree into SQL and Params.
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.RepoWrapper.QueryParameter.#ctor(System.String,System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleAccess.Core.Entity.RepoWrapper.QueryParameter" /> class.
            </summary>
            <param name="linkingOperator">The linking operator.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="queryOperator">The query operator.</param>
        </member>
        <member name="T:SimpleAccess.Core.Entity.EntityInfo`2">
            <summary>
            Represents the SimpleAccess Entity information.
            The EntityInfo is create and cache the stored procedure name, quires and parameters
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.GetInsertParameters(System.Object)">
            <summary>
            Get the Insert statement or StoredProcedure Parameters based on TDataParameters in ISimple
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.GetUpdateParameters(System.Object)">
            <summary>
            Get the Update statement or StoredProcedure Parameters based on TDataParameters in ISimple
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.GetSelectAllStatement">
            <summary>
            Default select statement with all columns of the entity
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.GetInsertStatement">
            <summary>
            Default insert statement with all columns and parameters of the entity
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.GetUpdateSatetment">
            <summary>
            Default update statement with all columns and parameters of the entity
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.GetDeleteStatment">
            <summary>
            Default delete statement with id parameter of the entity
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.#ctor(System.Type)">
            <summary>
            Initialize the new object
            </summary>
            <param name="type"> The Entity </param>
        </member>
        <member name="P:SimpleAccess.Core.Entity.EntityInfo`2.DbObjectName">
            <summary>
            Table/View Name of the Entity extracted from the <see cref="T:SimpleAccess.EntityAttribute"/> if the Entity is marked with it, otherwise the same name of Entity
            </summary>
        </member>
        <member name="P:SimpleAccess.Core.Entity.EntityInfo`2.StoredProcedureNameKeyWord">
            <summary>
            Stored procedure prefix of the Entity extracted from the <see cref="T:SimpleAccess.StoredProcedureNameKeyWordAttribute"/> 
            if the Entity is marked with it, otherwise the same name of Entity
            </summary>
        </member>
        <member name="P:SimpleAccess.Core.Entity.EntityInfo`2.EntityType">
            <summary>
            The Type of the Entity.
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.LoadEntityInformation">
            <summary>
            Load entity name from <see cref="T:SimpleAccess.EntityAttribute"/> if entity is marked otherwise that the entity name
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.ClearDbParameters">
            <summary>
            Clear all DbParamters
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Entity.EntityInfo`2.LoadOutParametersProperties(System.Object)">
            <summary>
            Load all the properties from DbParameters which were marked as ParameterDirection.Out
            </summary>
            <param name="instance"> The instance of object </param>
        </member>
        <member name="T:SimpleAccess.Core.Entity.NamespaceDoc">
            <summary>
            The <see cref="N:SimpleAccess.Core.Entity"/> namespace contains the core implementation for Entities in SimpleAcces.
            </summary>
        </member>
        <member name="T:SimpleAccess.Core.EntityParameters`1">
            <summary>
            Represents the SimpleAccess Entity information.
            The EntityInfo is create and cache the stored procedure name, quires and parameters
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.EntityParameters`1.LoadOutParametersProperties(System.Object)">
            <summary>
            Load all the properties from DbParameters which were marked as ParameterDirection.Out
            </summary>
            <param name="instance"> The instance of object </param>
        </member>
        <member name="M:SimpleAccess.Core.EntityParameters`1.Create``1(``0,System.Action{``0,System.Collections.Generic.IDictionary{System.Reflection.PropertyInfo,`0},System.Collections.Generic.IDictionary{System.Reflection.PropertyInfo,`0},System.Boolean},System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="createAction"></param>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.EntityParameters`1.FillParameters``1(``0,System.Action{``0,System.Collections.Generic.IDictionary{System.Reflection.PropertyInfo,`0}})">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="createAction"></param>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SimpleAccess.Core.ISimpleAccess`6">
            <summary>
            Represent the interface of SimpleAccess methods and it's implemented by SimpleAccess 
            </summary>
        </member>
        <member name="P:SimpleAccess.Core.ISimpleAccess`6.DefaultSimpleAccessSettings">
            <summary>
            Represent the default settings SimpleAccess <see cref="T:SimpleAccess.Core.SimpleAccessSettings" />
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(System.String,`3[])">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(System.String,System.Data.CommandType,`3[])">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(System.String,System.Object)">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object)">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(`1,System.String,`3[])">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(`1,System.String,System.Data.CommandType,`3[])">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(`1,System.String,System.Object)">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>        
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteNonQuery(`1,System.String,System.Data.CommandType,System.Object)">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>        
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(System.String,`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(System.String,System.Data.CommandType,`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(System.String,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(`1,System.String,`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(`1,System.String,System.Data.CommandType,`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(`1,System.String,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteScalar``1(`1,System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,`3[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,System.Data.CommandType,`3[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,System.Data.CommandBehavior,`3[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,System.Data.CommandType,System.Data.CommandBehavior,`3[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,System.Data.CommandBehavior,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteReader(System.String,System.Data.CommandType,System.Data.CommandBehavior,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(System.String,System.Data.CommandType,`3[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(System.String,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(System.String,System.Data.CommandType,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(`1,System.String,`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Data.Common.DbException"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(`1,System.String,System.Data.CommandType,`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(`1,System.String,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteValues``1(`1,System.String,System.Data.CommandType,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> value </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(`1,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Data.Common.DbException"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(`1,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(`1,System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntities``1(`1,System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(`1,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(`1,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},`3[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(`1,System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteEntity``1(`1,System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(System.String,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(System.String,System.Data.CommandType,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
             
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
             
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
             
             <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
             
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
             
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
             
             <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(`1,System.String,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(`1,System.String,System.Data.CommandType,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(`1,System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamics(`1,System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{dynamic} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> A list of dynamic. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(System.String,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(System.String,System.Data.CommandType,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(`1,System.String,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(`1,System.String,System.Data.CommandType,System.String,`3[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="parameters">  Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(`1,System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.ExecuteDynamic(`1,System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.Fill(System.String,System.Data.DataTable)">
            <summary>
            Execute the CommandText against connection and add or refresh rows in <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="commandText"></param>
            <param name="dataTable">A <see cref="T:System.Data.DataTable"/> to fill with records and, if necessary, schema  </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.Fill(System.String,System.Data.DataSet)">
            <summary>
            Execute the CommandText against connection and add or refresh rows in <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="dataSet"> A <see cref="T:System.Data.DataSet"/> to fill with records and, if necessary, schema  </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.BeginTrasaction">
            <summary> Begins a database transaction. </summary>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.GetNewConnection">
            <summary> Gets the new connection. </summary>
            
            <returns>  </returns>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.CloseDbConnection">
            <summary> Close the current open connection. </summary>
        </member>
        <member name="M:SimpleAccess.Core.ISimpleAccess`6.EndTransaction(`1,System.Boolean,System.Boolean)">
            <summary> Close an open database transaction. </summary>
            
            <param name="transaction">	  The SQL transaction. </param>
            <param name="transactionSucceed"> (optional) the transaction succeed. </param>
            <param name="closeConnection">    (optional) the close connection. </param>
        </member>
        <member name="T:SimpleAccess.Core.Logger.ISimpleLogger">
            <summary>
            Represent the default methods required by SimpleAccess to log the Exception
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Logger.ISimpleLogger.LogException(System.Exception)">
            <summary>
            Log the exception when the any exception occur in SimpleAccess
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:SimpleAccess.Core.Logger.NamespaceDoc">
            <summary>
            The <see cref="N:SimpleAccess.Core.Logger"/> namespace contains the Logging interface and default implementation <see cref="T:SimpleAccess.Core.Logger.ISimpleLogger"/> of SimpleAcces.
            </summary>
        </member>
        <member name="T:SimpleAccess.Core.Logger.SimpleLogger">
            <summary>
            Default implementation of ISimpleLoger, It uses the <see cref="T:System.Diagnostics.Trace"/> to log the <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.Logger.SimpleLogger.LogException(System.Exception)">
            <summary>
            Log the <see cref="T:System.Exception"/> using <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <param name="exception"> <see cref="T:System.Exception"/> thrown from the methods</param>
        </member>
        <member name="T:SimpleAccess.Core.NamespaceDoc">
            <summary>
            The <see cref="N:SimpleAccess.Core"/> namespace contains the core corfiguration, interfaces, attributes, helper classes and methods of SimpleAcces.
            </summary>
        </member>
        <member name="T:SimpleAccess.Core.SimpleAccessSettings">
            <summary>
            Used for setting up the default setting of SimpleAccess.
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.SimpleAccessSettings.GetProperConnectionString(System.String)">
            <summary>
            Check for the connection is a connectionString name from the config or 
            a complete database connetion string and return the connnection string.
            </summary>
            <param name="connection"> The connectionString Name from the config or a complete ConnectionString.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.SimpleAccessSettings.LoadConnectionStringSettingsFromConfigurationFile(System.String,System.Boolean)">
            <summary>
            Load and returns the <see cref="T:System.Configuration.ConnectionStringSettings"/> from the default config file
            based on provided contection string name.
            </summary>
            <param name="connectionStringName"> The connection string name </param>
            <param name="force"> The <see cref="T:System.Configuration.ConnectionStringSettings"/> required other wise thorw Exception </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.SimpleAccessSettings.#ctor">
            <summary>
            Initialize the new object of SimpleAccessSettings with default properties.
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.SimpleAccessSettings.#ctor(System.Data.CommandType)">
            <summary>
            Initialize the new object of SimpleAccessSettings with default properties.
            </summary>
            <param name="defaultCommandType"> The default <see cref="T:System.Data.CommandType"/> of this new Object</param>
        </member>
        <member name="M:SimpleAccess.Core.SimpleAccessSettings.#ctor(System.Data.CommandType,SimpleAccess.Core.Logger.ISimpleLogger)">
            <summary>
            Initialize the new object of SimpleAccessSettings with default properties.
            </summary>
            <param name="defaultCommandType"> The default <see cref="T:System.Data.CommandType"/> of this new object</param>
            <param name="defaultLogger"> The default <see cref="T:SimpleAccess.Core.Logger.ISimpleLogger"/> implementaion for parent SimpleAccess object</param>
        </member>
        <member name="P:SimpleAccess.Core.SimpleAccessSettings.DefaultCommandType">
            <summary>
            Default property of <see cref="T:System.Data.CommandType"/>.
            </summary>
        </member>
        <member name="P:SimpleAccess.Core.SimpleAccessSettings.DefaultLogger">
            <summary>
            Default <see cref="T:SimpleAccess.Core.Logger.ISimpleLogger"/>.
            </summary>
        </member>
        <member name="T:SimpleAccess.Entity.EntityInfo">
            <summary>
            Represents the SimpleAccess Entity information.
            The <see cref="T:SimpleAccess.Entity.EntityInfo"/> is only used for caching the stored procedure name
            </summary>
        </member>
        <member name="M:SimpleAccess.Entity.EntityInfo.#ctor(System.Type)">
            <summary>
            Initialize the new object
            </summary>
            <param name="type"> The Entity </param>
        </member>
        <member name="P:SimpleAccess.Entity.EntityInfo.Name">
            <summary>
            Simple Name of the Entity.
            </summary>
        </member>
        <member name="P:SimpleAccess.Entity.EntityInfo.Type">
            <summary>
            The Type of the Entity.
            </summary>
        </member>
        <member name="T:SimpleAccess.IEntity">
            <summary>
            Interface is required for Repository Delete methods
            </summary>
        </member>
    </members>
</doc>
