<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleAccess.SqlServer</name>
    </assembly>
    <members>
        <member name="T:SimpleAccess.NotASpParameterAttribute">
            <summary>
            Specifies that the property is not an SqlParameter.
            </summary>
        </member>
        <member name="T:SimpleAccess.EntityAttribute">
            <summary>
            Specifies the database table/view name of the Entity.
            </summary>
        </member>
        <member name="P:SimpleAccess.EntityAttribute.EntityName">
            <summary>
            Database table/view name.
            </summary>
        </member>
        <member name="M:SimpleAccess.EntityAttribute.#ctor(System.String)">
            <summary>
            Specifies the database table/view name of the Entity.
            </summary>
            <param name="entityName"> Table/View name.</param>
        </member>
        <member name="T:SimpleAccess.ParameterDirectionAttribute">
            <summary>
            Specifies that the ParameterDirection for a SqlParameter Property.
            </summary>
        </member>
        <member name="M:SimpleAccess.ParameterDirectionAttribute.#ctor(System.Data.ParameterDirection)">
            <summary>
            Specifies that the ParameterDirection for a SqlParameter Property.
            </summary>
            <param name="spParameterDirection"> Direction for the SqlParameter.</param>
        </member>
        <member name="T:SimpleAccess.DbExtensions.ConnectionExtension">
            --------------------------------------------------------------------------------------------------
                <summary> Connection extension. </summary>
                *
        </member>
        <member name="M:SimpleAccess.DbExtensions.ConnectionExtension.OpenSafely(System.Data.SqlClient.SqlConnection)">
            --------------------------------------------------------------------------------------------------
                    <summary> A SqlConnection extension method that opens a safely. </summary>
            		
                    <param name="con"> The con to act on. </param>
            		
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.DbExtensions.ConnectionExtension.CloseSafely(System.Data.SqlClient.SqlConnection)">
            --------------------------------------------------------------------------------------------------
                    <summary> A SqlConnection extension method that closes a safely. </summary>
            		
                    <param name="con"> The con to act on. </param>
            		
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.DbExtensions.DataReaderToObjectExtensions.DataReaderToObjectList``1(System.Data.IDataReader,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates a list of a given type from all the rows in a DataReader.
            
            Note this method uses Reflection so this isn't a high performance
            operation, but it can be useful for generic data reader to entity
            conversions on the fly and with anonymous types.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="reader">An open DataReader that's in position to read</param>
            <param name="fieldsToSkip">Optional - comma delimited list of fields that you don't want to update</param>
            <param name="piList">
            Optional - Cached PropertyInfo dictionary that holds property info data for this object.
            Can be used for caching hte PropertyInfo structure for multiple operations to speed up
            translation. If not passed automatically created.
            </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.DbExtensions.DataReaderToObjectExtensions.DataReaderToObject(System.Data.IDataReader,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Populates the properties of an object from a single DataReader row using
            Reflection by matching the DataReader fields to a public property on
            the object passed in. Unmatched properties are left unchanged.
            
            You need to pass in a data reader located on the active row you want
            to serialize.
            
            This routine works best for matching pure data entities and should
            be used only in low volume environments where retrieval speed is not
            critical due to its use of Reflection.
            </summary>
            <param name="reader">Instance of the DataReader to read data from. Should be located on the correct record (Read() should have been called on it before calling this method)</param>
            <param name="instance">Instance of the object to populate properties on</param>
            <param name="fieldsToSkip">Optional - A comma delimited list of object properties that should not be updated</param>
            <param name="piList">Optional - Cached PropertyInfo dictionary that holds property info data for this object</param>
        </member>
        <member name="M:SimpleAccess.SqlParametersExtensions.CreateSqlParametersFromDynamic(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Object)">
            <summary>
            Takes the dynamic object and creates the Sql Parameters from its properties
            </summary>
            <param name="sqlParameters"></param>
            <param name="otherParameters"></param>
        </member>
        <member name="M:SimpleAccess.SqlParametersExtensions.CreateSqlParametersFromDynamic(System.Data.SqlClient.SqlParameter[],System.Object)">
            <summary>
            Takes the dynamic object and creates the Sql Parameters from its properties
            </summary>
            <param name="sqlParameters"></param>
            <param name="otherParameters"></param>
        </member>
        <member name="T:SimpleAccess.Repository.IRepository">
            --------------------------------------------------------------------------------------------------
                <summary> IRepository. </summary>
                *
        </member>
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.GetAll``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})" -->
        <member name="M:SimpleAccess.Repository.IRepository.Get``1(System.Data.SqlClient.SqlParameter,System.Data.SqlClient.SqlTransaction,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameter"> The SQL parameter. </param>
                    <param name="transaction">  (optional) the transaction. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Get``1(System.Object,System.Data.SqlClient.SqlTransaction,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    <param name="transaction">  (optional) the transaction. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Get``1(System.Int64,System.Data.SqlClient.SqlTransaction,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="id">		   The identifier. </param>
                    <param name="transaction"> (optional) the transaction. </param>
                    <param name="fieldToSkip"> (optional) the field to skip. </param>
                    <param name="piList">	   (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Get(System.String,System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <param name="sql">		   The SQL. </param>
                    <param name="id">		   The identifier. </param>
                    <param name="fieldToSkip"> (optional) the field to skip. </param>
                    <param name="piList">	   (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Get(System.String,System.Data.SqlClient.SqlParameter,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <param name="sql">		    The SQL. </param>
                    <param name="sqlParameter"> The SQL parameter. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Get(System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <param name="sql">		    The SQL. </param>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Insert``1(System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Insert``1(System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given dynamic object as SqlParameter names and values. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Insert``1(SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Insert``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    <param name="sqlTransaction">			 The SQL transaction. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Insert``1(SimpleAccess.StoredProcedureParameters,System.Data.SqlClient.SqlTransaction)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction">			 The SQL transaction. </param>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Update``1(System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given sqlParameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Update``1(System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given dynamic object as SqlParameter names and values. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>        
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Update``1(SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given sqlParameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Update``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given sqlParameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction">			 The SQL transaction. </param>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Delete``1(System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given ID. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Delete``1(System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given dynamic object as SqlParameter names and values. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Delete``1(System.Int64,System.Data.SqlClient.SqlTransaction)">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given ID. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="id"> The identifier. </param>
                     <param name="sqlTransaction">			 The SQL transaction. </param>
                   
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given ID. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.SoftDelete``1(System.Int64)">
            --------------------------------------------------------------------------------------------------
                    <summary> Soft delete. </summary>
            		
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="id"> The identifier. </param>
            		
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the non query operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the non query operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the non query operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the non query operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="paramObject"> The dynamic object as parameters. </param>        
                    <returns> Number of rows affected (integer) </returns>
                    *
        </member>
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])" -->
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteScalar``1(System.String,System.Data.CommandType,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])" -->
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteReader``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])" -->
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteReader``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteReader``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])" -->
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.IRepository.ExecuteReader``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)" -->
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> The value of the entity. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> The value of the entity. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> The value of the entity. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> The value of the entity. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> A list of dynamic. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                   <summary> Executes the reader operation. </summary>
                    
                   <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                   <param name="sql">			 The SQL. </param>
                   <param name="commandType">   Type of the command. </param>
                   <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                   <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> A list of dynamic. </returns>
                   *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> A list of dynamic. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> A list of dynamic. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> Result in a dynamic object. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> Result in a dynamic object. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> Result in a dynamic object. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.ExecuteReaderSingle(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="!:Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> Result in a dynamic object. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.BeginTrasaction">
            --------------------------------------------------------------------------------------------------
                    <summary> Begins a transaction. </summary>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.GetNewConnection">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets the new connection. </summary>
                    
                    <returns> The new connection. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.IRepository.EndTransaction(System.Data.SqlClient.SqlTransaction,System.Boolean,System.Boolean)">
            --------------------------------------------------------------------------------------------------
                    <summary> Ends a transaction. </summary>
                    
                    <param name="sqlTransaction">	  The SQL transaction. </param>
                    <param name="transactionSucceed"> (optional) the transaction succeed. </param>
                    <param name="closeConnection">    (optional) the close connection. </param>
                    *
        </member>
        <member name="T:SimpleAccess.Repository.Repository">
            --------------------------------------------------------------------------------------------------
                <summary> Repository. </summary>
                *
        </member>
        <member name="P:SimpleAccess.Repository.Repository.DefaultConnectionString">
            <summary>
            Default connection string.
            </summary>
        </member>
        <member name="F:SimpleAccess.Repository.Repository._sqlConnection">
            --------------------------------------------------------------------------------------------------
                    <summary> The SQL connection. </summary>
                    *
        </member>
        <member name="F:SimpleAccess.Repository.Repository._sqlTransaction">
            --------------------------------------------------------------------------------------------------
            		<summary> The SQL transaction. </summary>
            		*
        </member>
        <member name="M:SimpleAccess.Repository.Repository.#ctor(System.Data.SqlClient.SqlConnection)">
            --------------------------------------------------------------------------------------------------
                    <summary> Constructor. </summary>
                    
                    <param name="sqlConnection"> The SQL connection. </param>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.#ctor(System.String)">
            --------------------------------------------------------------------------------------------------
                    <summary> Constructor. </summary>
                    
                    <param name="connectionString"> The connection string. </param>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.#ctor">
            --------------------------------------------------------------------------------------------------
                    <summary> Default constructor. </summary>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.BeginTrasaction">
            --------------------------------------------------------------------------------------------------
                    <summary> Begins a transaction. </summary>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.GetNewConnection">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets the new connection. </summary>
                    
                    <returns> The new connection. </returns>
                    *
        </member>
        <!-- Badly formed XML comment ignored for member "M:SimpleAccess.Repository.Repository.GetAll``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})" -->
        <member name="M:SimpleAccess.Repository.Repository.Get``1(System.Int64,System.Data.SqlClient.SqlTransaction,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="id">		   The identifier. </param>
                    <param name="transaction"> (optional) the transaction. </param>
                    <param name="fieldToSkip"> (optional) the field to skip. </param>
                    <param name="piList">	   (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Get``1(System.Data.SqlClient.SqlParameter,System.Data.SqlClient.SqlTransaction,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameter"> The SQL parameter. </param>
                    <param name="transaction">  (optional) the transaction. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Get``1(System.Object,System.Data.SqlClient.SqlTransaction,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    <param name="transaction">  (optional) the transaction. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Get(System.String,System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <param name="sql">		   The SQL. </param>
                    <param name="id">		   The identifier. </param>
                    <param name="fieldToSkip"> (optional) the field to skip. </param>
                    <param name="piList">	   (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Get(System.String,System.Data.SqlClient.SqlParameter,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <param name="sql">		    The SQL. </param>
                    <param name="sqlParameter"> The SQL parameter. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Get(System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets. </summary>
                    
                    <param name="sql">		    The SQL. </param>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    <param name="fieldToSkip">  (optional) the field to skip. </param>
                    <param name="piList">	    (optional) dictionary of property name and PropertyInfo object. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Insert``1(System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Insert``1(System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given dynamic object as SqlParameter names and values. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Insert``1(SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Insert``1(SimpleAccess.StoredProcedureParameters,System.Data.SqlClient.SqlTransaction)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    <param name="sqlTransaction">			 The SQL transaction. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Insert``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Inserts the given SQL parameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction">			 The SQL transaction. </param>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Update``1(System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given sqlParameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Update``1(System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given dynamic object as SqlParameter names and values. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>        
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Update``1(SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given sqlParameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Update``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            --------------------------------------------------------------------------------------------------
                    <summary> Updates the given sqlParameters. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction">			 The SQL transaction. </param>
                    <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Delete``1(System.Int64,System.Data.SqlClient.SqlTransaction)">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given ID. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="id"> The identifier. </param>
                    <param name="sqlTransaction">			 The SQL transaction. </param>
            
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Delete``1(System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given ID. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Delete``1(System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given dynamic object as SqlParameter names and values. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Deletes the given ID. </summary>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.SoftDelete``1(System.Int64)">
            --------------------------------------------------------------------------------------------------
            		<summary> Soft delete. </summary>
            		
            		<typeparam name="TEntity"> Type of the entity. </typeparam>
            		<param name="id"> The identifier. </param>
            		
            		<returns> . </returns>
            		*
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object)">
            --------------------------------------------------------------------------------------------------
                   <summary> Executes the non query operation. </summary>
                    
                   <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                   <param name="sqlTransaction"> The SQL transaction. </param>
                   <param name="sql">			  The SQL. </param>
                   <param name="commandType">    Type of the command. </param>
                    <param name="paramObject"> The dynamic object as parameters. </param>
                    
                   <returns> . </returns>
                   *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the non query operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the non query operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="paramObject"> The dynamic object as parameters. </param>        
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the non query operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the scalar operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="T"> Generic type parameter. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the scalar operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="T"> Generic type parameter. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteScalar``1(System.String,System.Data.CommandType,System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the scalar operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="T"> Generic type parameter. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the scalar operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="T"> Generic type parameter. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <typeparam name="TEntity"> Type of the entity. </typeparam>
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> A list of. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> A list of. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                   <summary> Executes the reader operation. </summary>
                    
                   <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                   <param name="sql">			 The SQL. </param>
                   <param name="commandType">   Type of the command. </param>
                   <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                   <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                   <returns> A list of. </returns>
                   *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> A list of. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sql">			 The SQL. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="fieldsToSkip">  (optional) the fields to skip. </param>
                    <param name="piList">		 (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.ExecuteReaderSingle(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Executes the reader single operation. </summary>
                    
                    <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="sql">			  The SQL. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="fieldsToSkip">   (optional) the fields to skip. </param>
                    <param name="piList">		  (optional) dictionary of property name and PropertyInfo object. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.EndTransaction(System.Data.SqlClient.SqlTransaction,System.Boolean,System.Boolean)">
            --------------------------------------------------------------------------------------------------
                    <summary> Ends a transaction. </summary>
                    
                    <param name="sqlTransaction">	  The SQL transaction. </param>
                    <param name="transactionSucceed"> (optional) the transaction succeed. </param>
                    <param name="closeConnection">    (optional) the close connection. </param>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.CreateCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Creates a command. </summary>
                    
                    <param name="queryString">   The query string. </param>
                    <param name="commandType">   Type of the command. </param>
                    <param name="sqlParameters"> Options for controlling the SQL. </param>
                    
                    <returns> The new command. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.CreateCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            --------------------------------------------------------------------------------------------------
                    <summary> Creates a command. </summary>
                    
                    <param name="sqlTransaction"> The SQL transaction. </param>
                    <param name="queryString">    The query string. </param>
                    <param name="commandType">    Type of the command. </param>
                    <param name="sqlParameters">  Options for controlling the SQL. </param>
                    
                    <returns> The new command. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.SqlDataReaderToExpando(System.Data.SqlClient.SqlDataReader)">
            --------------------------------------------------------------------------------------------------
                    <summary> SQL data reader to expando. </summary>
                    
                    <param name="reader"> The reader. </param>
                    
                    <returns> . </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.GetDynamicSqlData(System.Data.SqlClient.SqlDataReader)">
            --------------------------------------------------------------------------------------------------
                    <summary> Gets a dynamic SQL data. </summary>
                    
                    <param name="reader"> The reader. </param>
                    
                    <returns> The dynamic SQL data. </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.BuildSqlParameters(System.Object)">
            --------------------------------------------------------------------------------------------------
                    <summary> Build SqlParameter Array from dynamic object. </summary>
                     <param name="paramObject"> The dynamic object as parameters. </param>
                    <returns> SqlParameter[] object and if paramObject is null then return null </returns>
                    *
        </member>
        <member name="M:SimpleAccess.Repository.Repository.Dispose">
            --------------------------------------------------------------------------------------------------
                    <summary> Performs application-defined tasks associated with freeing, releasing, or resetting
                    unmanaged resources. </summary>
                    *
        </member>
        <member name="T:SimpleAccess.Repository.ISqlRepository">
            <summary>
            Represent the interface of SimpleAccess Repository methods and it's implemented by SqlRepository
            </summary>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.GetAll``1(System.String)">
            <summary> Get all TEntity object in a <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all TEntity in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Get``1(System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Get TEntity by Id or anyother parameter. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Get``1(System.Object,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Get``1(System.Int64,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id">		   The identifier. </param>
            <param name="transaction"> (optional) the transaction. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Insert``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Insert``1(System.Object)">
            <summary> Inserts the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Insert``1(SimpleAccess.StoredProcedureParameters)">
            <summary> Inserts the given TEntity. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Insert``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Update``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Update``1(System.Object)">
            <summary> Updates the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>        
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Update``1(SimpleAccess.StoredProcedureParameters)">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Update``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Delete``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Delete``1(System.Object)">
            <summary> Deletes the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Delete``1(System.Int64)">
            <summary> Deletes TEntity the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
             <param name="sqlTransaction">			 The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="sqlParameters">  Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.Repository.ISqlRepository.SoftDelete``1(System.Int64)">
            <summary> Soft delete. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="T:SimpleAccess.Repository.SqlRepository">
            <summary> Implements SqlRepository base SqlSimpleAccess with command type stored procedures. </summary>
        </member>
        <member name="P:SimpleAccess.Repository.SqlRepository.SimpleAccess">
            <summary> The SQL connection. </summary>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.#ctor(SimpleAccess.SqlServer.ISqlSimpleAccess)">
            <summary> Constructor. </summary>
            
            <param name="sqlSimpleAccess"> The SQL connection. </param>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.#ctor(System.String)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The connection string. </param>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.GetAll``1(System.String)">
            <summary> Enumerates get all in this collection. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all {TEntity} in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Get``1(System.Int64,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id">		   The identifier. </param>
            <param name="transaction"> (optional) the transaction. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Get``1(System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Get``1(System.Object,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Get(System.String,System.Int64,System.String)">
            <summary> Gets. </summary>
            
            <param name="sql">		   The SQL. </param>
            <param name="id">		   The identifier. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Get(System.String,System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <param name="sql">		    The SQL. </param>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Get(System.String,System.Object,System.String)">
            <summary> Gets. </summary>
            
            <param name="sql">		    The SQL. </param>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Insert``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Insert``1(System.Object)">
            <summary> Inserts the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Insert``1(SimpleAccess.StoredProcedureParameters)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Insert``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Update``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Update``1(System.Object)">
            <summary> Updates the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>        
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Update``1(SimpleAccess.StoredProcedureParameters)">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Update``1(System.Data.SqlClient.SqlTransaction,SimpleAccess.StoredProcedureParameters)">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="storedProcedureParameters"> Options for controlling the stored procedure. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Delete``1(System.Int64)">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="id"> The identifier. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Delete``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Delete``1(System.Object)">
            <summary> Deletes the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="sqlParameters">  Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.SoftDelete``1(System.Int64)">
            <summary> Soft delete. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.Repository.SqlRepository.Dispose">
            <summary> Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources. </summary>
        </member>
        <member name="T:SimpleAccess.SqlServer.ISqlSimpleAccess">
            <summary>
            Sql Server implementaion for SimpleAccess
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.ISqlSimpleAccess.SimpleLogger">
            <summary>
            SimpleLogger to log exception
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.CreateCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="commandText">   The query string. </param>
            <param name="commandType">   Type of the command. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.CreateCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText">    The query string. </param>
            <param name="commandType">    Type of the command. </param>
            <param name="sqlParameters">  Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.SqlDataReaderToExpando(System.Data.SqlClient.SqlDataReader)">
            <summary> SQL data reader to expando. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.GetDynamicSqlData(System.Data.SqlClient.SqlDataReader)">
            <summary> Gets a dynamic SQL data. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> The dynamic SQL data. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.BuildSqlParameters(System.Object)">
            <summary> Build SqlParameter Array from dynamic object. </summary>
             <param name="paramObject"> The dynamic object as parameters. </param>
            <returns> SqlParameter[] object and if paramObject is null then return null </returns>
        </member>
        <member name="T:SimpleAccess.SqlServer.SqlSimpleAccess">
            <summary>
            Sql Server implementaion for SimpleAccess.
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSimpleAccess.DefaultConnectionString">
            <summary>
            Default connection string.
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSimpleAccess.SimpleLogger">
            <summary>
            SimpleLogger to log exception
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSimpleAccess.DefaultSimpleAccessSettings">
            <summary>
            Default settings for simple access
            </summary>
        </member>
        <member name="F:SimpleAccess.SqlServer.SqlSimpleAccess._sqlConnection">
            <summary> The SQL connection. </summary>
        </member>
        <member name="F:SimpleAccess.SqlServer.SqlSimpleAccess._sqlTransaction">
            <summary> The SQL transaction. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary> Constructor. </summary>
            
            <param name="sqlConnection"> The SQL connection. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.SqlClient.SqlConnection,System.Data.CommandType)">
            <summary> Constructor. </summary>
            
            <param name="sqlConnection"> The SQL connection. </param>
            <param name="defaultCommandType"> The default command type for all queries </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.SqlClient.SqlConnection,SimpleAccess.Core.SimpleAccessSettings)">
            <summary> Constructor. </summary>
            
            <param name="sqlConnection"> The SQL connection. </param>
            <param name="defaultSimpleAccessSettings"> The default settings for simple access </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.String)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The ConnectionString Name from the config file or a complete ConnectionString . </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.String,System.Data.CommandType)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The ConnectionString Name from the config file or a complete ConnectionString . </param>
            <param name="defaultCommandType"> The default command type for all queries </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.String,SimpleAccess.Core.SimpleAccessSettings)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The ConnectionString Name from the config file or a complete ConnectionString . </param>
            <param name="defaultSimpleAccessSettings"> The default settings for simple access </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.CommandType)">
            <summary> Default constructor. </summary>
            <param name="defaultCommandType"> The default command type for all queries </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(SimpleAccess.Core.SimpleAccessSettings)">
            <summary> Default constructor. </summary>
            <param name="defaultSimpleAccessSettings"> The default settings for simple access </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#cctor">
            <summary>
            Static constructor to load default connection string from default configuration file
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText">			The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="sqlParameters">  Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText">			The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType">    Type of the command. </param>
            <param name="sqlParameters">  Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Object)">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText">			The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText">			The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType">    Type of the command. </param>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.GetNewConnection">
            <summary> Gets the new connection. </summary>
            <returns> The new connection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.CloseCurrentDbConnection">
            <summary> Close the current open connection. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.BeginTrasaction">
            <summary> Begins a transaction. </summary>
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.EndTransaction(System.Data.SqlClient.SqlTransaction,System.Boolean,System.Boolean)">
            <summary> Ends a transaction. </summary>
            
            <param name = "sqlTransaction" > The SQL transaction. </param>
            <param name = "transactionSucceed" > (optional)the transaction succeed. </param>
            <param name = "closeConnection" > (optional)the close connection. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.CreateCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="commandText">   The query string. </param>
            <param name="commandType">   Type of the command. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.CreateCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText">    The query string. </param>
            <param name="commandType">    Type of the command. </param>
            <param name="sqlParameters">  Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.SqlDataReaderToExpando(System.Data.SqlClient.SqlDataReader)">
            <summary> SQL data reader to expando. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.GetDynamicSqlData(System.Data.SqlClient.SqlDataReader)">
            <summary> Gets a dynamic SQL data. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> The dynamic SQL data. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.BuildSqlParameters(System.Object)">
            <summary> Build SqlParameter Array from dynamic object. </summary>
             <param name="paramObject"> The dynamic object as parameters. </param>
            <returns> SqlParameter[] object and if paramObject is null then return null </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.Dispose">
            <summary> Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources. </summary>
        </member>
    </members>
</doc>
