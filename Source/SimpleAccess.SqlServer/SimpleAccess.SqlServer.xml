<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleAccess.SqlServer</name>
    </assembly>
    <members>
        <member name="T:SimpleAccess.SqlServer.SqlParametersExtensions">
            <summary>
            Defines the extra extensions method for <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.CreateSqlParametersFromObject(System.Collections.Generic.List{System.Data.SqlClient.SqlParameter},System.Object)">
            <summary>
            Takes the dynamic object and creates the Sql Parameters from its properties
            </summary>
            <param name="sqlParameters"></param>
            <param name="otherParameters"></param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.CreateSqlParametersFromDynamic(System.Data.SqlClient.SqlParameter[],System.Object)">
            <summary>
            Takes the dynamic object and creates the Sql Parameters from its properties
            </summary>
            <param name="sqlParameters"></param>
            <param name="otherParameters"></param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.ToDataParam``1(``0,System.String)">
            <summary>
            Create and returns a SqlParameter of attached struct type.
            </summary>
            <typeparam name="T"> Attached by variable type.</typeparam>
            <param name="value"> The value of attached variable.</param>
            <param name="paramName"> DbParameter Name </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.ToDataParam``1(``0,System.String,System.Data.SqlDbType)">
            <summary>
            Create and returns a SqlParameter of attached struct type.
            </summary>
            <typeparam name="T"> Attached by variable type.</typeparam>
            <param name="value"> The value of attached variable.</param>
            <param name="paramName"> SqlParameter Name </param>
            <param name="sqlDbType"> The <see cref="T:System.Data.SqlDbType"/> of the SqlParameter </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.ToDataParam``1(System.Nullable{``0},System.String)">
            <summary>
            Create and returns a SqlParameter of attached nullable struct type.
            </summary>
            <typeparam name="T"> Attached by variable type.</typeparam>
            <param name="value"> The value of attached variable.</param>
            <param name="paramName"> SqlParameter Name </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.ToDataParam``1(System.Nullable{``0},System.String,System.Data.SqlDbType)">
            <summary>
            Create and returns a SqlParameter of attached nullable struct type.
            </summary>
            <typeparam name="T"> Attached by variable type.</typeparam>
            <param name="value"> The value of attached variable.</param>
            <param name="paramName"> SqlParameter Name </param>
            <param name="sqlDbType"> The <see cref="T:System.Data.SqlDbType"/> of the SqlParameter </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.ToDataParam(System.String,System.String)">
            <summary>
            Create and returns a SqlParameter of attached string.
            The method also avoid the Sql Injection by replacing single qoute "'" character with tow single qoutes "''" characters
            </summary>
            <param name="value"> The value of attached variable.</param>
            <param name="paramName"> SqlParameter Name </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.ToDataParam(System.String,System.String,System.Int32)">
            <summary>
            Create and returns a SqlParameter of attached struct type.
            The method also avoid the Sql Injection by replacing single qoute "'" character with tow single qoutes "''" characters
            </summary>
            <param name="value"> The value of attached variable.</param>
            <param name="paramName"> SqlParameter Name </param>
            <param name="size"> The length of the string value in the SqlParameters</param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlParametersExtensions.ToSafeDataParam(System.String,System.String,System.Int32)">
            <summary>
            Create and returns a SqlParameter of attached struct type.
            The method allow to pass "'" character to database
            </summary>
            <param name="value"> The value of attached variable.</param>
            <param name="paramName"> SqlParameter Name </param>
            <param name="size"> The length of the string value in the SqlParameters</param>
            <returns></returns>
        </member>
        <member name="T:SimpleAccess.SqlServer.StoredProcedureParameters">
            <summary>
            Base class of all TEntity Classes
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.StoredProcedureParameters.AddSqlParameters(System.Object)">
            <summary>
            Add more parameters in underline DbParameters
            </summary>
            <param name="paramsObject"></param>
        </member>
        <member name="M:SimpleAccess.SqlServer.StoredProcedureParameters.CreateSqlParametersFromProperties(SimpleAccess.Core.ParametersType)">
            <summary>
            Create parameters from object properties
            </summary>
            <param name="parametersType"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.StoredProcedureParameters.LoadOutParametersProperties">
            <summary>
            Load all the properties from DbParameters which were marked as ParameterDirection.Out
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.StoredProcedureParameters.ClearSpParameters">
            <summary>
            Clear all DbParameters
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.StoredProcedureParameters.GetSpParameters(SimpleAccess.Core.ParametersType)">
            <summary>
            Get underline DbParametes
            </summary>
            <param name="parametersType"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleAccess.SqlServer.ISqlSimpleAccess">
            <summary>
            Represent the SimpleAccess interface for SQL Server
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.ISqlSimpleAccess.SimpleLogger">
            <summary>
            SimpleLogger to log exception
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.CreateCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="commandText"> The query string. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.CreateCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The query string. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.SqlDataReaderToExpando(System.Data.SqlClient.SqlDataReader)">
            <summary> SQL data reader to <see cref="T:System.Dynamic.ExpandoObject"/>. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.GetDynamicSqlData(System.Data.SqlClient.SqlDataReader)">
            <summary> Gets a dynamic SQL data. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> The dynamic SQL data. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlSimpleAccess.BuildDbParameters(System.Object)">
            <summary> Build SqlParameter Array from dynamic object. </summary>
             <param name="paramObject"> The dynamic object as parameters. </param>
            <returns> SqlParameter[] object and if paramObject is null then return null </returns>
        </member>
        <member name="T:SimpleAccess.SqlServer.NamespaceDoc">
            <summary>
            The <see cref="N:SimpleAccess.SqlServer"/> namespace contains the SimpleAccess implementation for SqlServer.
            </summary>
        </member>
        <member name="T:SimpleAccess.SqlServer.ISqlRepository">
            <summary>
            Represent the interface of SimpleAccess Repository methods
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.ISqlRepository.SimpleAccess">
            <summary>
            Internal ISqlSimpleAccess instance
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.GetAll``1(System.String)">
            <summary> Get all TEntity object in a <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all TEntity in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.GetAll``1(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Get all TEntity object in a <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all TEntity in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Get``1(System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Get TEntity by Id or any other parameter. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Get``1(System.Object,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Object,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Get``1(System.Int64,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id">		   The identifier. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Int64,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="id">		   The identifier. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the first record of the result. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Find``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the first record of the result. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.FindAll``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Insert``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Insert``1(System.Object)">
            <summary> Inserts the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Insert``1(``0)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Insert``1(System.Data.SqlClient.SqlTransaction,``0)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.InsertAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to insert </param>
            
            <returns> The number of affected records</returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.InsertAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0})">
             <summary> Inserts the given SQL parameters. </summary>
             
             <typeparam name="TEntity"> Type of the entity. </typeparam>
             <param name="sqlTransaction">			 The SQL transaction. </param>
             <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to insert </param>
            
             <returns> The number of affected records</returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Update``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Update``1(System.Object)">
            <summary> Updates the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>        
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Update``1(``0)">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entity"> Entity to insert </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Update``1(System.Data.SqlClient.SqlTransaction,``0)">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="entity"> Entity to insert </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.UpdateAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Updates all the given entities. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to update </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.UpdateAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0})">
            <summary> Updates all the given entities. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to update </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Delete``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the <typeparamref name="TEntity"/>  by given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Delete``1(System.Object)">
            <summary> Deletes the <typeparamref name="TEntity"/>  by given object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Delete``1(System.Int64)">
            <summary> Deletes the <typeparamref name="TEntity"/>  by given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Deletes the <typeparamref name="TEntity"/> by given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
             <param name="sqlTransaction">			 The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the <typeparamref name="TEntity"/>  by given <see cref="T:System.Data.SqlClient.SqlParameter"/> array. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.DeleteAll``1">
            <summary> Delete All the <typeparamref name="TEntity"/> records from the table. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction)">
            <summary> Delete All the <typeparamref name="TEntity"/> records with a transaction. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.DeleteAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by  objects as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by  objects as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.DeleteAll``1(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by given IDs. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="ids"> The identifiers of records. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by given IDs. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="ids"> The identifiers of records. </param>
            <param name="sqlTransaction"> The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.SoftDelete``1(System.Int64)">
            <summary> Soft delete the <typeparamref name="TEntity"/> record. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.ISqlRepository.SoftDelete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Soft delete the <typeparamref name="TEntity"/> record. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="T:SimpleAccess.SqlServer.PagedListParameters`1">
            <summary>
            The class will be moved to SimpleAccess.Extensions
            </summary>
        </member>
        <member name="T:SimpleAccess.SqlServer.SqlEntityRepository">
            <summary> Implements SqlRepository base SqlSimpleAccess with command type stored procedures. </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlEntityRepository.SimpleAccess">
            <summary> The SQL connection. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.#ctor(SimpleAccess.SqlServer.ISqlSimpleAccess)">
            <summary> Constructor. </summary>
            
            <param name="sqlSimpleAccess"> The SQL connection. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.#ctor(System.String)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The connection string. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.GetAll``1(System.String)">
            <summary> Enumerates get all in this collection. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all {TEntity} in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.GetAll``1(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Enumerates get all in this collection. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all {TEntity} in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Get``1(System.Int64,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id">		   The identifier. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Int64,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id">		   The identifier. </param>
            <param name="transaction"> (optional) the transaction. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Get``1(System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Get``1(System.Object,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Object,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the first record of the result. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Find``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the first record of the result. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.FindAll``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Insert``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Insert``1(System.Object)">
            <summary> Inserts the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Insert``1(``0)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Insert``1(System.Data.SqlClient.SqlTransaction,``0)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.InsertAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to insert </param>
            
            <returns> The number of affected records</returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.InsertAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0})">
             <summary> Inserts the given SQL parameters. </summary>
             
             <typeparam name="TEntity"> Type of the entity. </typeparam>
             <param name="sqlTransaction">			 The SQL transaction. </param>
             <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to insert </param>
            
             <returns> The number of affected records</returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Update``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Update``1(System.Object)">
            <summary> Updates the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>        
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Update``1(``0)">
            <summary> Updates the given TEntity. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Update``1(System.Data.SqlClient.SqlTransaction,``0)">
            <summary> Updates the given TEntity. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.UpdateAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Updates all the given entities. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to update </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.UpdateAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0})">
            <summary> Updates all the given entities. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to update </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Delete``1(System.Int64)">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="id"> The identifier. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Delete``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Delete``1(System.Object)">
            <summary> Deletes the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.DeleteAll``1">
            <summary> Delete All records from the table. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction)">
            <summary> Delete All records from the table with a transaction. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.DeleteAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by expression. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by expression. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SqlTransaction. </param>
            <param name="expression">The expression.</param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.DeleteAll``1(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by given IDs. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="ids"> The identifiers of records. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by given IDs. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="ids"> The identifiers of records. </param>
            <param name="sqlTransaction"> The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.SoftDelete``1(System.Int64)">
            <summary> Soft delete. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.SoftDelete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Soft delete the <typeparamref name="TEntity"/> record. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepository.Dispose">
            <summary> Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources. </summary>
        </member>
        <member name="T:SimpleAccess.SqlServer.SqlEntityRepositorySetting">
            <summary>
            Hold the default settings of SimpleAccess Repositories
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlEntityRepositorySetting.EntityInfos">
            <summary>
            The Dictionary of <see cref="P:SimpleAccess.SqlServer.SqlEntityRepositorySetting.EntityInfos"/> for cache.
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlEntityRepositorySetting.GetEntityInfo(System.Type)">
            <summary>
            Get the <see cref="!:EntityInfo"/> object from the cache.
            </summary>
            If the <paramref name="type"/> has no <se
            cref="!:EntityInfo"/> then it will add the and return the <see cref="!:EntityInfo"/>.
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleAccess.SqlServer.SqlRepository">
            <summary> Implements SqlRepository base SqlSimpleAccess with command type stored procedures. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlRepository.#ctor(SimpleAccess.SqlServer.ISqlSimpleAccess)">
            <summary> Constructor. </summary>
            
            <param name="sqlSimpleAccess"> The SQL connection. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlRepository.#ctor(System.String)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The connection string. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlRepository.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlServerSqlBuilder.CreateEntityParameters(System.Boolean)">
            <summary>
            Create parameters from object properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlServerSqlBuilder.CreateDataParameter(System.Reflection.PropertyInfo,System.Collections.Generic.IDictionary{System.Reflection.PropertyInfo,System.Data.SqlClient.SqlParameter},System.Collections.Generic.IDictionary{System.Reflection.PropertyInfo,System.Data.SqlClient.SqlParameter},System.Boolean)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlServerSqlBuilder.CreateDataParameter(System.Reflection.PropertyInfo,SimpleAccess.Core.ParametersType,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IList{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
            <param name="parametersType"></param>
            <param name="propertyInfos"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlServerSqlBuilder.ClearDbParameters">
            <summary>
            Clear all DbParameters
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlServerSqlBuilder.LoadOutParametersProperties(SimpleAccess.Core.EntityParameters{System.Data.SqlClient.SqlParameter},System.Object)">
            <summary>
            Load all the properties from DbParameters which were marked as ParameterDirection.Out
            </summary>
            <param name="entityParameters">The EntityParameters object based on TDataParameters in ISimpleAccess</param>
            <param name="instance"> The instance of object </param>
        </member>
        <member name="T:SimpleAccess.SqlServer.SqlSpRepository">
            <summary> Implements SqlRepository base SqlSimpleAccess with command type stored procedures. </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSpRepository.SimpleAccess">
            <summary> The SQL connection. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.#ctor(SimpleAccess.SqlServer.ISqlSimpleAccess)">
            <summary> Constructor. </summary>
            
            <param name="sqlSimpleAccess"> The SQL connection. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.#ctor(System.String)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The connection string. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.GetAll``1(System.String)">
            <summary> Enumerates get all in this collection. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all {TEntity} in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.GetAll``1(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Enumerates get all in this collection. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction">  (optional) the transaction. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> An enumerator that allows for each to be used to process get all {TEntity} in this
            collection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Get``1(System.Int64,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id">		   The identifier. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Int64,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id">		   The identifier. </param>
            <param name="transaction"> (optional) the transaction. </param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Get``1(System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="sqlParameter"> The SQL parameter. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Get``1(System.Object,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Get``1(System.Data.SqlClient.SqlTransaction,System.Object,System.String)">
            <summary> Gets. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="paramObject"> The dynamic object as parameters. </param>
            <param name="fieldToSkip">  (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the first record of the result. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Find``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the first record of the result. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.FindAll``1(System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.FindAll``1(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.FindAll``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary> Searches for all <typeparamref name="TEntity"/> that matches the conditions defined by the specified predicate, and returns the result as <see cref="T:System.Collections.Generic.IEnumerable`1"/>. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="transaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            <param name="fieldToSkip"> (optional) the field to skip. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Insert``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Insert``1(System.Object)">
            <summary> Inserts the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Insert``1(``0)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Insert``1(System.Data.SqlClient.SqlTransaction,``0)">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.InsertAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Inserts the given SQL parameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to insert </param>
            
            <returns> The number of affected records</returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.InsertAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0})">
             <summary> Inserts the given SQL parameters. </summary>
             
             <typeparam name="TEntity"> Type of the entity. </typeparam>
             <param name="sqlTransaction">			 The SQL transaction. </param>
             <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to insert </param>
            
             <returns> The number of affected records</returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Update``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Updates the given sqlParameters. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Update``1(System.Object)">
            <summary> Updates the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>        
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Update``1(``0)">
            <summary> Updates the given TEntity. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Update``1(System.Data.SqlClient.SqlTransaction,``0)">
            <summary> Updates the given TEntity. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="entity"> Entity to insert </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.UpdateAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Updates all the given entities. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to update </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.UpdateAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0})">
            <summary> Updates all the given entities. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="entities"> The <![CDATA[IEnumerable<TEntity>]]> to update </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Delete``1(System.Int64)">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction">			 The SQL transaction. </param>
            <param name="id"> The identifier. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Delete``1(System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Delete``1(System.Object)">
            <summary> Deletes the given dynamic object as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="paramObject"> The dynamic object as parameters. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Delete``1(System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlParameter[])">
            <summary> Deletes the given ID. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.DeleteAll``1">
            <summary> Delete All records from the table. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction)">
            <summary> Delete All records from the table with a transaction. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.DeleteAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by  objects as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="expression">The expression.</param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by  objects as SqlParameter names and values. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The transaction. </param>
            <param name="expression">The expression.</param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.DeleteAll``1(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by given IDs. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="ids"> The identifiers of records. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.DeleteAll``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> Deletes all the <typeparamref name="TEntity"/> records by given IDs. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="ids"> The identifiers of records. </param>
            <param name="sqlTransaction"> The SQL transaction. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.SoftDelete``1(System.Int64)">
            <summary> Soft delete. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.SoftDelete``1(System.Data.SqlClient.SqlTransaction,System.Int64)">
            <summary> Soft delete the <typeparamref name="TEntity"/> record. </summary>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="id"> The identifier. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepository.Dispose">
            <summary> Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources. </summary>
        </member>
        <member name="T:SimpleAccess.SqlServer.SqlSpRepositorySetting">
            <summary>
            Hold the default settings of SimpleAccess Repositories
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSpRepositorySetting.EntityInfos">
            <summary>
            The Dictionary of <see cref="P:SimpleAccess.SqlServer.SqlSpRepositorySetting.EntityInfos"/> for cache.
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSpRepositorySetting.GetEntityInfo(System.Type)">
            <summary>
            Get the <see cref="!:EntityInfo"/> object from the cache.
            </summary>
            If the <paramref name="type"/> has no <se
            cref="!:EntityInfo"/> then it will add the and return the <see cref="!:EntityInfo"/>.
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleAccess.SqlServer.SqlSimpleAccess">
            <summary>
            Sql Server implementation for SimpleAccess.
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSimpleAccess.DefaultConnectionString">
            <summary>
            Default connection string.
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSimpleAccess.SimpleLogger">
            <summary>
            SimpleLogger to log exception
            </summary>
        </member>
        <member name="P:SimpleAccess.SqlServer.SqlSimpleAccess.DefaultSimpleAccessSettings">
            <summary>
            Default settings for simple access
            </summary>
        </member>
        <member name="F:SimpleAccess.SqlServer.SqlSimpleAccess._sqlConnection">
            <summary> The SQL connection. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary> Constructor. </summary>
            
            <param name="sqlConnection"> The SQL connection. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.SqlClient.SqlConnection,System.Data.CommandType)">
            <summary> Constructor. </summary>
            
            <param name="sqlConnection"> The SQL connection. </param>
            <param name="defaultCommandType"> The default command type for all queries </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.SqlClient.SqlConnection,SimpleAccess.Core.SimpleAccessSettings)">
            <summary> Constructor. </summary>
            
            <param name="sqlConnection"> The SQL connection. </param>
            <param name="defaultSimpleAccessSettings"> The default settings for simple access </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.String)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The ConnectionString Name from the config file or a complete ConnectionString . </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.String,System.Data.CommandType)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The ConnectionString Name from the config file or a complete ConnectionString . </param>
            <param name="defaultCommandType"> The default command type for all queries </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.String,SimpleAccess.Core.SimpleAccessSettings)">
            <summary> Constructor. </summary>
            
            <param name="connection"> The ConnectionString Name from the config file or a complete ConnectionString . </param>
            <param name="defaultSimpleAccessSettings"> The default settings for simple access </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(System.Data.CommandType)">
            <summary> Default constructor. </summary>
            <param name="defaultCommandType"> The default command type for all queries </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#ctor(SimpleAccess.Core.SimpleAccessSettings)">
            <summary> Default constructor. </summary>
            <param name="defaultSimpleAccessSettings"> The default settings for simple access </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.#cctor">
            <summary>
            Static constructor to load default connection string from default configuration file
            </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Object)">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the non query operation. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes a command text against the connection and returns the number of rows affected. 
            </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="parameters"> Parameters required to execute CommandText. </param>
            
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object)">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>        
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object)">
            <summary> Executes a command text against the connection and returns the number of rows affected. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>        
            <returns> Number of rows affected (integer) </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.String,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
             <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteScalar``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
             <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The {T} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Data.CommandBehavior,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Data.CommandType,System.Data.CommandBehavior,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Data.CommandType,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Data.CommandBehavior,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteReader(System.String,System.Data.CommandType,System.Data.CommandBehavior,System.Object)">
            <summary> Executes the commandText and return TDbDataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="commandBehavior"> The CommandBehavior of executing DbCommand</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The TDbDataReader </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.String,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.String,System.Data.CommandType,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.Data.SqlClient.SqlTransaction,System.String,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object)">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Type of the entity. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Data.Common.DbException"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="transaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteValues``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="T"> Generic type parameter. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The TEntity value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
                
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
             <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.Data.SqlClient.SqlTransaction,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Data.Common.DbException"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Generic type parameter. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Executes the command text, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Generic type parameter. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The {TEntity} value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.Data.SqlClient.SqlTransaction,System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntities``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a <see cref="T:System.Collections.Generic.IEnumerable`1" /> from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The <see cref="T:System.Collections.Generic.IEnumerable`1" /> value </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		 (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.Data.SqlClient.SqlTransaction,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.Data.SqlClient.SqlTransaction,System.String,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteEntity``1(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary> Sends the CommandText to the Connection and builds a TEntity from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <typeparam name="TEntity"> Type of the entity. </typeparam>
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="propertyInfoDictionary">		  (optional) dictionary of property name and PropertyInfo object. </param>
            
            <returns> The value of the entity. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
             
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
             
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
             
             <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
             
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
             
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
             
             <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.Data.SqlClient.SqlTransaction,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.Data.SqlClient.SqlTransaction,System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamics(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a IEnumerable{object} from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> A list of object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters"> Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.Data.SqlClient.SqlTransaction,System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            <param name="sqlParameters">  Parameters required to execute CommandText. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.Data.SqlClient.SqlTransaction,System.String,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            -<param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.ExecuteDynamic(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Object,System.String)">
            <summary> Sends the CommandText to the Connection and builds a anonymous object from DataReader. </summary>
            
            <exception cref="T:System.Exception"> Thrown when an exception error condition occurs. </exception>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="commandType"> Type of the command. </param>
            <param name="paramObject"> The anonymous object as parameters. </param>
            <param name="fieldsToSkip"> (optional) the fields to skip. </param>
            
            <returns> Result in a anonymous object. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.Fill(System.String,System.Data.DataTable)">
            <summary>
            Execute the CommandText against connection and add or refresh rows in <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="commandText"></param>
            <param name="dataTable">A <see cref="T:System.Data.DataTable"/> to fill with records and, if necessary, schema  </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.Fill(System.String,System.Data.DataSet)">
            <summary>
            Execute the CommandText against connection and add or refresh rows in <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="commandText"> The SQL statement, table name or stored procedure to execute at the data source.</param>
            <param name="dataSet"> A <see cref="T:System.Data.DataSet"/> to fill with records and, if necessary, schema  </param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.GetNewConnection">
            <summary> Gets the new connection. </summary>
            <returns> The new connection. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.CloseDbConnection">
            <summary> Close the current open connection. </summary>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.BeginTransaction">
            <summary> Begins a transaction. </summary>
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.BeginTransaction(System.Data.IsolationLevel)">
            <summary> Begins a transaction. </summary>
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.BeginTransaction(System.String)">
            <summary> Begins a transaction. </summary>
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.BeginTransaction(System.Data.IsolationLevel,System.String)">
            <summary> Begins a transaction. </summary>
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.CreateCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="commandText"> The query string. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters">Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.EndTransaction(System.Data.SqlClient.SqlTransaction,System.Boolean,System.Boolean)">
            <summary> Ends a transaction. </summary>
            
            <param name = "sqlTransaction" > The SQL transaction. </param>
            <param name = "transactionSucceed" > (optional)the transaction succeed. </param>
            <param name = "closeConnection" > (optional)the close connection. </param>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.CreateCommand(System.Data.SqlClient.SqlTransaction,System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary> Creates a command. </summary>
            
            <param name="sqlTransaction"> The SQL transaction. </param>
            <param name="commandText"> The query string. </param>
            <param name="commandType"> Type of the command. </param>
            <param name="sqlParameters"> Options for controlling the SQL. </param>
            
            <returns> The new command. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.SqlDataReaderToExpando(System.Data.SqlClient.SqlDataReader)">
            <summary> SQL data reader to <see cref="T:System.Dynamic.ExpandoObject"/>. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> . </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.GetDynamicSqlData(System.Data.SqlClient.SqlDataReader)">
            <summary> Gets a object SQL data. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> The object SQL data. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.GetValues``1(System.Data.SqlClient.SqlDataReader)">
            <summary> Gets a object SQL data. </summary>
            
            <param name="reader"> The reader. </param>
            
            <returns> The object SQL data. </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.BuildDbParameters(System.Object)">
            <summary> Build SqlParameter Array from anonymous object. </summary>
             <param name="paramObject"> The anonymous object as parameters. </param>
            <returns> SqlParameter[] object and if paramObject is null then return null </returns>
        </member>
        <member name="M:SimpleAccess.SqlServer.SqlSimpleAccess.Dispose">
            <summary> Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources. </summary>
        </member>
        <member name="T:SimpleAccess.Core.SqlDataReaderToObject">
            <summary>
            Extension to load objects from DataReaders
            </summary>
        </member>
        <member name="M:SimpleAccess.Core.SqlDataReaderToObject.DataReaderToObjectList2``1(System.Data.IDataReader,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates a list of a given type from all the rows in a DataReader.
            
            Note this method uses Reflection so this isn't a high performance
            operation, but it can be useful for generic data reader to entity
            conversions on the fly and with anonymous types.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="reader">An open DataReader that's in position to read</param>
            <param name="fieldsToSkip">Optional - comma delimited list of fields that you don't want to update</param>
            <param name="piList">
            Optional - Cached PropertyInfo dictionary that holds property info data for this object.
            Can be used for caching hte PropertyInfo structure for multiple operations to speed up
            translation. If not passed automatically created.
            </param>
            <param name="piListBasedOnDbColumn"> List of <see cref="T:System.Reflection.PropertyInfo"/> object having <see cref="T:SimpleAccess.DbColumnAttribute"/> in it's custom attributes</param>
            <returns></returns>
        </member>
        <member name="M:SimpleAccess.Core.SqlDataReaderToObject.DataReaderToObject2``1(System.Data.IDataReader,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Created the object of TType and populates the properties of that object from a single DataReader row using
            Reflection by matching the DataReader fields to a public property 
            of the object. Unmatched properties are left unchanged.
            
            You need to pass in a data reader located on the active row you want
            to serialize.
            
            </summary>
            <param name="reader">Instance of the DataReader to read data from. Should be located on the correct record (Read() should have been called on it before calling this method)</param>
            <param name="fieldsToSkip">Optional - A comma delimited list of object properties that should not be updated</param>
            <param name="piList">Optional - Cached PropertyInfo dictionary that holds property info data for this object</param>
            <param name="piListBasedOnDbColumn"> List of <see cref="T:System.Reflection.PropertyInfo"/> object having <see cref="T:SimpleAccess.DbColumnAttribute"/> in it's custom attributes</param>
        </member>
        <member name="M:SimpleAccess.Core.SqlDataReaderToObject.DataReaderToObject2``1(System.Data.IDataReader,``0,System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Populates the properties of an object from a single DataReader row using
            Reflection by matching the DataReader fields to a public property on
            the object passed in. Unmatched properties are left unchanged.
            
            You need to pass in a data reader located on the active row you want
            to serialize.
            
            This routine works best for matching pure data entities and should
            be used only in low volume environments where retrieval speed is not
            critical due to its use of Reflection.
            </summary>
            <param name="reader">Instance of the DataReader to read data from. Should be located on the correct record (Read() should have been called on it before calling this method)</param>
            <param name="instance">Instance of the object to populate properties on</param>
            <param name="fieldsToSkip">Optional - A comma delimited list of object properties that should not be updated</param>
            <param name="piList">Optional - Cached PropertyInfo dictionary that holds property info data for this object</param>
            <param name="piListBasedOnDbColumn"> List of <see cref="T:System.Reflection.PropertyInfo"/> object having <see cref="T:SimpleAccess.DbColumnAttribute"/> in it's custom attributes</param>
        </member>
    </members>
</doc>
